import{$ as e,a0 as t,a1 as p,a6 as o,a2 as a,a3 as c,a4 as l,a5 as s,I as r}from"./framework-e783454b.js";const i={},d=a("div",{class:"hint-container tip"},[a("p",{class:"hint-container-title"},"提示"),a("p",null,"内存分区问题")],-1),u=s(`<h2 id="_1、自动存储、静态存储和动态存储" tabindex="-1"><a class="header-anchor" href="#_1、自动存储、静态存储和动态存储" aria-hidden="true">#</a> 1、自动存储、静态存储和动态存储</h2><p>(第四章内容)4.8.5 自动存储：用时创建，结束时销毁。一般存储在栈区。在c语言和C++11之前，auto关键字表示变量为自动存储类型，auto可缺省。在C++11新标准中，auto的意思改为了“自动推导变量类型”。</p><p>静态存储：变量定义在函数外，或者用static关键字修饰时为静态存储。在c语言古老版本中，智能初始化静态数组和静态结构，在C++Release2.0及以后和ANSI C中，也可以初始化自动数组和自动结构。</p><p>动态存储：用new/delete来管理堆区空间。</p><p>（第九章内容）9.2</p><h2 id="_2、存储持续性、作用域和链接性" tabindex="-1"><a class="header-anchor" href="#_2、存储持续性、作用域和链接性" aria-hidden="true">#</a> 2、存储持续性、作用域和链接性</h2><p>注意，C++使用三种不同的方案来管理存储数据，这些方案的区别就在于数据保留在内存中的时间。但是在C++11新标准中，新增加了一种“线程存储持续性”：<code>当前，多核处理器很常见，这些CPU可同时处理多个执行任务。这让程序能够将计算放在可并行处理的不同线程中。如果变量是使用关键字thread_local 声明的，则其生命周期与所属的线程一样长。本书不探讨并行编程。</code></p><p>自动存储持续性：C++中有两种存储持续性为自动的变量：auto自动变量（栈）和寄存器变量(register)。不过register也只是建议编译器将这个变量存储在cpu的寄存器中，以提高对变量的访问速度，但具体是否实现有编译器决定。</p><p>静态存储持续性：C++为静态存储持续性提供了3种链接性：外部链接性（可在其他文件中访问）、内部连接性（只能在当前文件中访问）、无连接性（只能在函数或当前块中访问）。这些变量在程序执行期间一直存在。</p><p>原文：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>参考：C<span class="token operator">++</span> Primer Plus第<span class="token number">9.2</span>章的内容和<span class="token punctuation">[</span>CSDN<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token comment">//blog.csdn.net/EJoft/article/details/122703902)</span>
C<span class="token operator">++</span>为在内存中存储数据提供了多种选择，可以选择数据保存在内存中的时间长度（存储持续性 storage duration）以及程序哪一部分可以访问数据（作用域 scope 和链接 linkage）

C<span class="token operator">++</span>中有四种不同的方案来存储数据，这些方案的区别就在于数据保留在内存中的时间

<span class="token operator">*</span><span class="token operator">*</span>自动存储持续性<span class="token punctuation">(</span>Automatic Storage Duration<span class="token punctuation">)</span>：<span class="token operator">*</span><span class="token operator">*</span>在函数定义中声明的变量（包括函数参数）在存储持续性上是自动的。它们在程序开始执行其所属的函数或者代码块时被创建，在执行完函数或代码块时，他们使用的内存被释放。C<span class="token operator">++</span>有两种存储持续性为自动的变量：自动变量和寄存器变量。
静态存储持续性<span class="token punctuation">(</span>Static Storage Duration<span class="token punctuation">)</span>：在函数定义外定义的变量和使用关键字 <span class="token keyword">static</span> 定义的变量。它们在程序运行的运行的整个过程中都存在，C<span class="token operator">++</span>有三种该变量。
线程存储持续性<span class="token punctuation">(</span>C<span class="token operator">++</span><span class="token number">11</span> Thread Storage Duration<span class="token punctuation">)</span>：多核处理器很常见，这些CPU能同时处理多个执行任务，这让程序能将计算放在可并行处理的不同线程中。如果变量用 <span class="token keyword">thread_local</span> 声明，那么其生命周期和所属的线程一样长。
动态存储持续性<span class="token punctuation">(</span>Dynamic Storage Duration<span class="token punctuation">)</span>：用 <span class="token keyword">new</span> 运算符分配的内存将一直存在，直到使用 <span class="token keyword">delete</span> 运算符将其释放或程序结束为止，有时被称为 自由存储 <span class="token punctuation">(</span>free store<span class="token punctuation">)</span>或 堆 <span class="token punctuation">(</span>heap<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表格总结： <img src="https://s3.bmp.ovh/imgs/2022/08/11/86e4ae613499dbe6.png" alt="图1" loading="lazy"><img src="https://s3.bmp.ovh/imgs/2022/08/11/52776a151f9c0f98.png" alt="图2" loading="lazy"></p>`,12),m={href:"https://blog.csdn.net/qq_40739219/article/details/121436579",target:"_blank",rel:"noopener noreferrer"},h=s('<h2 id="_3、c-c-内存分区" tabindex="-1"><a class="header-anchor" href="#_3、c-c-内存分区" aria-hidden="true">#</a> 3、C/C++内存分区</h2><p>局部变量：栈（即：我们常说的堆栈） static变量：数据区、data区和.bss区 静态局部变量和全局变量：静态存储区 常量：位于常量区，ro.data区</p><p>堆：一种内存管理机制，通过malloc、calloc或realloc申请内存，free释放内存（new/delete) 以下图片来源于《嵌入式linux与c语言内核》P92左右： <img src="https://s3.bmp.ovh/imgs/2022/08/24/1cddf7efc782aa82.jpg" alt="图1" loading="lazy"><img src="https://s3.bmp.ovh/imgs/2022/08/24/2af970a315cb201d.jpg" alt="图2" loading="lazy"><img src="https://s3.bmp.ovh/imgs/2022/08/24/cee421c0402b884a.jpg" alt="图3" loading="lazy"></p><p>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 程序的内存五区:</p><p>全局区（静态数据区），存放全局变量、静态变量。初始化的 全局变量和静态变量在一块区域.Data段， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域.bss段。 程序结束后由系统释放。注意，显式初始化的全局变量和静态变量存放在.Data段，未显式初始化的变量存放在.bss段，并由编译器自动初始化为0。 堆，程序员管理。 栈，存放程序局部变量。 文字常量区:—常量字符串就是放在这里的。 程序结束后由系统释放。还有const关键字修饰的值也是存放在此。 代码区.text: 存放函数体的二进制代码</p><p>还有一种内存四分区: 将全局（静态）变量和常量结合到一起，归结为“数据区”。 栈区: 系统使用 堆区: 程序员使用 数据区: 由全局变量/静态变量（.Data段和.bss段）和常量组成。 代码区（.text）:存放函数的二进制代码</p>',6);function k(_,g){const n=r("ExternalLinkIcon");return t(),p("div",null,[d,o(" more "),u,a("p",null,[a("a",m,[c("参考CSDN"),l(n)])]),h])}const b=e(i,[["render",k],["__file","内存分区问题.html.vue"]]);export{b as default};
