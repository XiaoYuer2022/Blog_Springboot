import{$ as o,a0 as r,a1 as c,a6 as p,a2 as t,a3 as s,a4 as n,a5 as a,I as l}from"./framework-e783454b.js";const _={},i=t("div",{class:"hint-container tip"},[t("p",{class:"hint-container-title"},"提示"),t("p",null,"C/C++字符串处理函数大汇总")],-1),d={href:"https://www.cnblogs.com/kongweisi/p/14676259.html",target:"_blank",rel:"noopener noreferrer"},h=a("<p>2、strcpy(目标字符串，源字符串）或strncpy(目的字符串，源字符串，长度) 不会复制\\0 注意：内存复制：，emcpy(目的地址，源地址，sizeof()长度) 恢复至\\0，注意目的地址要分配足够的空间，不然会段错误</p><p>3、字符串追加函数strcat(目标字符串，源字符串) 或strncat(目的字符串。源字符串，长度)</p><p>4、比较字符串strcmp(s1,s2) strncmp(s1,s2,strlen()长度)</p><p>5、字符串格式转换函数sprintf() sscanf() sprintf使用的较多，使用场景比如，1.获取时间戳，格式化时间格式；2.日志文件系统写入格式化；</p><p>6、strstr字符串中查找指定字符串 <strong>推荐使用cpp的string的find函数</strong><code>char* strstr(源字符串s1，&quot;匹配字符串s2&quot;)</code>。</p><p>7、strchr字符串中查找指定字符 <strong>推荐使用cpp的string的find函数</strong><code>char* strchar(源字符串s1，&#39;字符c&#39;)</code>。参数1是字符串，参数2是字符。查找该字符在字符串中最后一次出现的位置。换个思路向：或者，是从右侧开始找，寻找字符在字符串中最后一次出现的位置。这个函数可以用来处理路径字符串，来获取文件名。对于s1=&quot;a/b/c/d.jpg&quot;，字符c=&#39;/&#39;，对于函数<code>char* p=strchr(s1,&#39;/&#39;)</code>,函数返回值p=“/d.jpg&quot;。一般使用时是p+1，即”d.jpg&quot;。</p>",6),u=t("strong",null,"推荐使用cpp封装的split方法，其中要用到cpp的流和getline函数",-1),f={href:"http://c.biancheng.net/view/1345.html",target:"_blank",rel:"noopener noreferrer"},g=t("p",null,"9、atoi()转整形/atof()转双精度/atol()转long整型 注意：①跳过前面的空格字符，直到遇到数字或正负号才开始做转换，而遇到非数字或字符串结束符('\\0')才结束转换",-1),m=t("p",null,[s("10、strpbrk "),t("code",null,"char* strpbrk(s1,s2)"),s('，s1中寻找第一次出现s2中任意字符是的字符串指针。比如，s1="Hi,Linux" ,s2="Linux"，那么函数返回字符串指针所指向的字符串内容为i,Linux')],-1),k=t("p",null,"11、strcasecmp 忽略大小写，比较字符串大小。第一个参数为s1，第二个参数为s2，s1小时返回负数。",-1),x=t("p",null,[s("12、strspn "),t("code",null,"char* strspn(字符串s1，字符串s2)"),s("，strspn()返回的数值为n，则代表字符串s 开头连续有n 个字符都是属于字符串accept内的字符。")],-1);function b(q,v){const e=l("ExternalLinkIcon");return r(),c("div",null,[i,p(" more "),t("p",null,[s("参考资料："),t("a",d,[s("cnblogs"),n(e)]),s(" 1、strlen(str*) 计算字符串长度（不含'\\0'） sizeof是计算所占内存大小，包含‘\\0’")]),h,t("p",null,[s("8、字符串分割函数strtok() "),u,s(" 参考博客："),t("a",f,[s("参考博客"),n(e)]),s(" 格式：strtok（目标字符串，“目标字符串中所包含的字符”）")]),g,m,k,x])}const L=o(_,[["render",b],["__file","c和c__字符串处理函数大汇总.html.vue"]]);export{L as default};
